// <auto-generated />
using MatterCentral.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MatterCentral.Migrations
{
    [DbContext(typeof(ALCContext))]
    [Migration("20170906233704_MatterModel")]
    partial class MatterModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MatterCentral.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MatterCentral.Models.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("ShowOnAuthorization");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("MatterCentral.Models.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<string>("Buyer");

                    b.Property<DateTime>("Effective");

                    b.Property<DateTime>("Expiration");

                    b.Property<string>("Number");

                    b.Property<int?>("ReceiverId");

                    b.Property<int?>("ShipperId");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("StatusId");

                    b.ToTable("Authorizations");
                });

            modelBuilder.Entity("MatterCentral.Models.AuthorizationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("AuthorizationStatus");
                });

            modelBuilder.Entity("MatterCentral.Models.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<bool>("ItemStatus");

                    b.Property<string>("OrganizationalUnit");

                    b.HasKey("Id");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("MatterCentral.Models.Commodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AuthorizationId");

                    b.Property<string>("Code");

                    b.Property<int>("DescId");

                    b.Property<string>("DescName");

                    b.Property<int>("GroupId");

                    b.Property<string>("GroupName");

                    b.Property<string>("Name");

                    b.Property<int>("StatusId");

                    b.Property<string>("StatusName");

                    b.Property<int>("SubGroupId");

                    b.Property<string>("SubGroupName");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("MatterCentral.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("VehicleNumber");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("MatterCentral.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactPhone");

                    b.Property<string>("County");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MaxGrossReceive");

                    b.Property<int>("MaxGrossShip");

                    b.Property<int>("MaxTareReceive");

                    b.Property<int>("MaxTareShip");

                    b.Property<int>("MinGrossReceive");

                    b.Property<int>("MinGrossShip");

                    b.Property<int>("MinTareReceive");

                    b.Property<int>("MinTareShip");

                    b.Property<string>("Name");

                    b.Property<string>("Owner");

                    b.Property<string>("State");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MatterCentral.Models.OffloadPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("TractId");

                    b.HasKey("Id");

                    b.HasIndex("TractId");

                    b.ToTable("OffloadPoints");
                });

            modelBuilder.Entity("MatterCentral.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ItemStatus");

                    b.Property<string>("Unit");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("MatterCentral.Models.Scaler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LocationId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Scalers");
                });

            modelBuilder.Entity("MatterCentral.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<int?>("ApprovalStatusId");

                    b.Property<int?>("AuthorizationId");

                    b.Property<int?>("CommodityId");

                    b.Property<string>("ContainerNumber");

                    b.Property<double>("ConvertedNet");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("DestinationId");

                    b.Property<int?>("DriverId");

                    b.Property<double>("Gross");

                    b.Property<DateTime>("InDate");

                    b.Property<string>("LoadTicketNumber");

                    b.Property<double>("Net");

                    b.Property<int?>("OffloadPointId");

                    b.Property<int?>("OriginationId");

                    b.Property<DateTime>("OutDate");

                    b.Property<int?>("ProcessStatusId");

                    b.Property<int?>("ProducerId");

                    b.Property<bool>("QuotaOverride");

                    b.Property<int?>("ScalerId");

                    b.Property<int?>("StatusId");

                    b.Property<string>("SupplierTicketNumber");

                    b.Property<double>("Tare");

                    b.Property<int?>("TractId");

                    b.Property<int?>("TransportationId");

                    b.Property<int?>("TypeId");

                    b.Property<int?>("WeightUnitTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("DriverId");

                    b.HasIndex("OffloadPointId");

                    b.HasIndex("OriginationId");

                    b.HasIndex("ProcessStatusId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ScalerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TractId");

                    b.HasIndex("TransportationId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WeightUnitTypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MatterCentral.Models.TicketApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("TicketApprovalStatuses");
                });

            modelBuilder.Entity("MatterCentral.Models.TicketProcessStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("TicketProcessStatuses");
                });

            modelBuilder.Entity("MatterCentral.Models.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("TicketStatuses");
                });

            modelBuilder.Entity("MatterCentral.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("MatterCentral.Models.Tract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LocationId");

                    b.Property<string>("Name");

                    b.Property<string>("YearPlanted");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Tracts");
                });

            modelBuilder.Entity("MatterCentral.Models.Transportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountCode");

                    b.Property<string>("Code");

                    b.Property<bool>("ItemStatus");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Transportations");
                });

            modelBuilder.Entity("MatterCentral.Models.WeightUnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("WeightUnitTypes");
                });

            modelBuilder.Entity("MatterCentral.Models.Account", b =>
                {
                    b.HasOne("MatterCentral.Models.AccountType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("MatterCentral.Models.Authorization", b =>
                {
                    b.HasOne("MatterCentral.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("MatterCentral.Models.Organization", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("MatterCentral.Models.Organization", "Shipper")
                        .WithMany()
                        .HasForeignKey("ShipperId");

                    b.HasOne("MatterCentral.Models.AuthorizationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("MatterCentral.Models.Commodity", b =>
                {
                    b.HasOne("MatterCentral.Models.Authorization")
                        .WithMany("Commodities")
                        .HasForeignKey("AuthorizationId");
                });

            modelBuilder.Entity("MatterCentral.Models.OffloadPoint", b =>
                {
                    b.HasOne("MatterCentral.Models.Tract", "Tract")
                        .WithMany()
                        .HasForeignKey("TractId");
                });

            modelBuilder.Entity("MatterCentral.Models.Scaler", b =>
                {
                    b.HasOne("MatterCentral.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("MatterCentral.Models.Ticket", b =>
                {
                    b.HasOne("MatterCentral.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("MatterCentral.Models.TicketApprovalStatus", "ApprovalStatus")
                        .WithMany()
                        .HasForeignKey("ApprovalStatusId");

                    b.HasOne("MatterCentral.Models.Authorization", "Authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId");

                    b.HasOne("MatterCentral.Models.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityId");

                    b.HasOne("MatterCentral.Models.Location", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.HasOne("MatterCentral.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("MatterCentral.Models.OffloadPoint", "OffloadPoint")
                        .WithMany()
                        .HasForeignKey("OffloadPointId");

                    b.HasOne("MatterCentral.Models.Location", "Origination")
                        .WithMany()
                        .HasForeignKey("OriginationId");

                    b.HasOne("MatterCentral.Models.TicketProcessStatus", "ProcessStatus")
                        .WithMany()
                        .HasForeignKey("ProcessStatusId");

                    b.HasOne("MatterCentral.Models.Organization", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("MatterCentral.Models.Scaler", "Scaler")
                        .WithMany()
                        .HasForeignKey("ScalerId");

                    b.HasOne("MatterCentral.Models.TicketStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("MatterCentral.Models.Tract", "Tract")
                        .WithMany()
                        .HasForeignKey("TractId");

                    b.HasOne("MatterCentral.Models.Transportation", "Transportation")
                        .WithMany()
                        .HasForeignKey("TransportationId");

                    b.HasOne("MatterCentral.Models.TicketType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("MatterCentral.Models.WeightUnitType", "WeightUnitType")
                        .WithMany()
                        .HasForeignKey("WeightUnitTypeId");
                });

            modelBuilder.Entity("MatterCentral.Models.Tract", b =>
                {
                    b.HasOne("MatterCentral.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
